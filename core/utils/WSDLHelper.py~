'''
Created on Jan 20, 2013

@author: Santiago Diaz - salchoman@gmail.com
'''

from suds.client import Client
from core.utils.project_manager import pm
from suds.sax.text import Raw
from suds import WebFault
from suds import null
#from suds.xsd.doctor import Import, ImportDoctor
#from suds.plugin import *
from urllib2 import URLError
from urlparse import urlparse
import exceptions
import urllib2
import os
import logging

#TODO: Terminar tipos de datos!!! http://www.w3.org/TR/xmlschema-2/#built-in-datatypes
CONTENT_TYPE_EXCEPTION = "Cannot process the message because the content type"
DEFAULT_STRING_VALUE = 'antares'
DEFAULT_DECIMAL_VALUE = 1.0
DEFAULT_BOOLEAN_VALUE = 1
DEFAULT_INTEGER_VALUE = 10
DEFAULT_LONG_VALUE = 99999
DEFAULT_DATE_VALUE = '12/12/1990'

class WSDLHelper(object):
    
    def __init__(self):
        logging.basicConfig(level=logging.DEBUG)
        logging.getLogger('suds.client').setLevel(logging.DEBUG)
        self._client = None
        self._cllib = None
        #Flags
        self.serviceName = ''
        self.portName = ''

    def loadWSDL(self, url):
        #ServiceDefinition @ client.sd
        #ports = (port, [methods])
        #ports = (port, [(name, [args])])
        #ports = (port, [name, [(type, name)]])
        try:
            msg = 'Error'
            if url.startswith('file'):
                self._cllib = urllib2.urlopen(pm.getURL())
            else:
                self._cllib = urllib2.urlopen(url)
            #sc_import = Import('http://www.w3.org/)
            #sc_doctor = ImportDoctor(sc_import)
            print 'line1'
            self._client = Client(url, autoblend=True, faults=False, cachingpolicy=1)
            print 'line2'
            self.setup()
            #self.fixHeaders(url)
        except URLError:
            msg =  "Error: Can't connect to " + url
        except exceptions.ValueError:
            msg =  "Error: Malformed URL\n" + url
        except os.error:
            msg =  "Error: Can't write to offline WSDL file"
        except Exception as e:
            msg = 'Error: loadWSDL @ WSDLHelper ' + str(e) + '; ' + type(e)
        else:
            msg = 'OK'
        finally:
            return msg

    def setup(self):
        self.serviceName = self._client.sd[0].service.name
        self.portName = self._client.sd[0].ports[0][0].name
        print 'srv: ' + self.serviceName
        print 'prt: ' + self.portName

    def fixHeaders(self, url):
        try:
            port, methods = self._client.sd[0].ports[0]
            name, args = methods[0]
            res = getattr(self._client.service, name)()
            print res
        except Exception as e:
            txt = str(e)
            if CONTENT_TYPE_EXCEPTION in txt:
                types = txt.split("'")
                #TODO: Delete
                #print 'type2: ' + types[3]
                self._client.set_options(headers={'Content-Type':types[3]})
            print type(e)
            print e
            return False
        else:
            return True
        
    def getMethods(self):
        rsp = []
        for sd in self._client.sd:
            if sd.service.name == self.serviceName:
                for port, methods in sd.ports:
                    if port.name == self.portName:
                        for name, args in methods:
                            rsp.append(name)
        return rsp					

    def getRqRx(self, opName):
        try:
            tosend = self.getParamObjs(opName)
            res = getattr(self._client.service, opName)(**tosend)
            print 'getRqRx @ WSDLHelper: ' + res
        except Exception as e:
            print 'getRqRx @ WSDLHelper' + type(e)
            print 'getRqRx @ WSDLHelper ' + e
        except WebFault as detail:
            print 'getRqRx @ WSDLHelper: ' + detail
        else:	
            return (None, None)
        finally:
            return (self._client.messages['tx'], self._client.messages['rx'])

    def getParamObjs(self, opName):
        tosend = {}
        try:
            for name, elem in self.getParams(opName):
            #Simple types
            #TODO: Set default type values: Enum, DateTime, Single
                if str(elem.type[0]) == 'string':
                    tosend[name] = DEFAULT_STRING_VALUE
                elif str(elem.type[0]) == 'decimal':
                    tosend[name] = DEFAULT_DECIMAL_VALUE
                elif str(elem.type[0]) == 'int':
                    tosend[name] = DEFAULT_INTEGER_VALUE
                elif str(elem.type[0]) == 'boolean':
                    tosend[name] = DEFAULT_BOOLEAN_VALUE
                elif str(elem.type[0]) == 'long':
                    tosend[name] = DEFAULT_LONG_VALUE
                #TODO: !
                elif str(elem.type[0]) == 'date':
                    tosend[name] = DEFAULT_DATE_VALUE
                #Complex types
                else:
                    param = self._client.factory.create('{' + elem.type[1] + '}' + elem.type[0])
                    for key in param.__keylist__:
                        #TODO: How to know type value?
                        param[key] = DEFAULT_STRING_VALUE
                    tosend[name] = param
        except Exception as e:
            print 'getParamObjs @ WSDLHelper: ' + str(e)
            tosend = {}
        return tosend
        
    def getParams(self, opName):
        for sd in self._client.sd:
            for port, methods in sd.ports:
                for name, args in methods:
                    if name == opName:
                        #Tuples: (name, Element)
                            return args
        return None
    
    def getParamsSchema(self, opName):
        ret = []
        for name, elem in self.getParams(opName):
            if elem.type[1] and elem.type[0]:
                ret.append(self._client.factory.resolver.find('{' + elem.type[1] + '}' + elem.type[0]))
        return ret
    
    def getParamsNames(self, opName):
        ret = []
        for name, elem in self.getParams(opName):
            ret.append(name)
        return ret
            

    def getBindings(self):
        ret = []
        for sd in self._client.sd:
            for port, methods in sd.ports:
                ret.append(port)
        return ret

    def getServices(self):
        ret = []
        for sd in self._client.sd:
            ret.append(sd.service.name)
        return ret

    def sendRaw(self, opName, xml):
        #Inject raw XML from UI
        res = getattr(self._client.service, opName)(__inject={'msg':xml})
        return self._client.messages['rx']
    
    #Creates dict to show info in GUI
    def srvInfoDict(self):
        port = urlparse(self._cllib.url).port
        if not port:
            port = 80
        hostname = urlparse(self._cllib.url).hostname
        dict = {'hostname': hostname, 'port': port, 'header': self._cllib.headers.getheader('Server')}
        return dict

    #TODO: Binding = Port ???
    def setPort(self, pName):
        if pName != '':
            self.portName = pName
            self._client.set_options(port=pName)

    def setService(self, sName):
        if sName != '':
            self.serviceName = sName
            self._client.set_options(service=sName)

wsdlhelper = WSDLHelper()
